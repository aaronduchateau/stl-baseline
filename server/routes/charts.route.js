import express from 'express';
import * as userCtrl from '../controllers/user.controller';
import isAuthenticated from '../middlewares/authenticate';
import validate from '../config/joi.validate';
import schema from '../utils/validator';
import ccxt from 'ccxt';

const router = express.Router();
//const bittrexExchange = new ccxt.bittrex();

//https://github.com/ccxt/ccxt/wiki/Manual

/**
 * @swagger
 * tags:
 *   - name: me
 *     description: User operations
 */

/**
 * @swagger
 * definitions:
 *   User:
 *     type: object
 *     properties:
 *       id:
 *         type: integer
 *         description: Unique identifier representing a specific user
 *         example: 2
 *       first_name:
 *         type: string
 *         description: first name of the user
 *         example: Krishna
 *       last_name:
 *         type: string
 *         description: last name of the user
 *         example: Timilsina
 *       email:
 *         type: string
 *         description: email of the user
 *         required: true
 *         example: test@gmail.com
 *       password:
 *         type: string
 *         description: password of the user
 *         required: true
 *         example: "1234"
 *       status:
 *         type: integer
 *         description: status of the user
 *         example: 1
 *       created_at:
 *         type: string
 *         format: date-time
 *         description: User creation datetime
 *       updated_at:
 *         type: string
 *         format: date-time
 *         description: User update datetime
 *   Error:
 *     type: object
 *     properties:
 *        message:
 *           type: string
 *        error:
 *           type: boolean
 *           default: true
 */

/**
 * @swagger
 * securityDefinitions:
 *   Bearer:
 *     description: |
 *            For accessing the API a valid JWT token must be passed in all the queries in
 *            the 'Authorization' header.
 *
 *
 *            A valid JWT token is generated by the API and returned as answer of a call
 *            to the route /auth/login giving a valid user & password.
 *
 *
 *            The following syntax must be used in the 'Authorization' header:
 *
 *            Bearer xxxxxx.yyyyyyy.zzzzzz
 *     type: apiKey
 *     name: Authorization
 *     in: header
 *
 */

 router.route('/exchange/:id')

    /**
     * @swagger
     * /users/me:
     *   get:
     *     tags:
     *       - me
     *     summary: Find the user by authToken
     *     operationId: findByAuth
     *     consumes:
     *       - application/json
     *     produces:
     *       - application/json
     *     parameters:
     *       - name: id
     *         in: path
     *         description: id of user that needs to be fetched
     *         required: true
     *         type: integer
     *     responses:
     *       200:
     *         description: OK
     *         schema:
     *           $ref: "#/definitions/User"
     *       404:
     *          description: User not found
     *          schema:
     *             $ref: '#/definitions/Error'
     */

    .get(isAuthenticated, (req, res) => {
        //console.log('!!!!WTF');
        //console.log(bittrexExchange.name);
        //console.log(bittrexExchange.urls['api']);
        let exchange = new ccxt[req.params.id]();
        if (exchange){
            (async () => {
                let markets = await exchange.load_markets();
                res.json({
                    error: false,
                    data: markets
                });
                console.log (bittrexExchange.id, markets)
            }) ()
        }
        
    });

router.route('/exchanges')

    /**
     * @swagger
     * /users/me:
     *   get:
     *     tags:
     *       - me
     *     summary: Find the user by authToken
     *     operationId: findByAuth
     *     consumes:
     *       - application/json
     *     produces:
     *       - application/json
     *     parameters:
     *       - name: id
     *         in: path
     *         description: id of user that needs to be fetched
     *         required: true
     *         type: integer
     *     responses:
     *       200:
     *         description: OK
     *         schema:
     *           $ref: "#/definitions/User"
     *       404:
     *          description: User not found
     *          schema:
     *             $ref: '#/definitions/Error'
     */

    .get(isAuthenticated, (req, res) => {
        res.json({
            error: false,
            data: ccxt.exchanges
        });
    });

export default router;